# -*- coding: utf-8 -*-
"""whisper_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/nyanta012/demo/blob/main/whisper_v2.ipynb
"""

!pip install git+https://github.com/nyanta012/whisper -q

!pip install gradio==3.4.0

import gradio as gr 
import whisper

model = whisper.load_model("large")

def create_textfile(video_name):
    results = model.transcribe(video_name, verbose=False, language="ja")
    with open("transcribe.txt", mode="w") as f:
        for index, _dict in enumerate(results["segments"]):
            cumsum_time = 0
            start_time = cumsum_time + _dict["start"]
            end_time = cumsum_time + _dict["end"]
            s_h, e_h = int(start_time//(60 * 60)), int(end_time//(60 * 60))
            s_m, e_m = int(start_time//(60)), int(end_time//(60))
            s_s, e_s = int(start_time % 60), int(end_time % 60)
            f.write(f'[{s_h:02}:{s_m:02}:{s_s:02} ===> {e_h:02}:{e_m:02}:{e_s:02}] {_dict["text"]}\n')
    return "transcribe.txt"

css = """
        .gradio-container {
            font-family: 'IBM Plex Sans', sans-serif;
        }
        .container {
            max-width: 730px;
            margin: auto;
            padding-top: 1.5rem;
        }
        #gallery {
            min-height: 22rem;
            margin-bottom: 15px;
            margin-left: auto;
            margin-right: auto;
            border-bottom-right-radius: .5rem !important;
            border-bottom-left-radius: .5rem !important;
        }
        #gallery>div>.h-full {
            min-height: 20rem;
        }

"""

block = gr.Blocks(css=css)

with block:   
    gr.Markdown("whisper Demo")
    with gr.Group():
        with gr.Box():
            with gr.Row(mobile_collapse=False, equal_height=True):
                text_button = gr.Button("transcribe").style(
                        margin=False,
                        rounded=(True, True, True, True),
                    )
        video = gr.Audio(source="upload", type="filepath", interactive=True)       
        transcribe = gr.File(label="Transcripts text file")
        text_button.click(create_textfile, inputs=[video], outputs=[transcribe])

block.launch(debug=True)